<?php

use App\Helpers\uuid;
use App\Models\Notification\Notification;
use App\Models\Settings\Setting;
use Carbon\Carbon as Carbon;
use Illuminate\Support\Str;
use App\Models\Profileviews;
use App\Models\Availability;

use App\Services\Eazypay\Eazypay;
/**
 * Henerate UUID.
 *
 * @return uuid
 */
function generateUuid()
{
    return uuid::uuid4();
}

if(!function_exists('UrlSlug'))
{
  function UrlSlug($string,$table,$field,$key=NULL,$value=NULL,$i=1)
  {
    $slug   = Str::slug($string);
	$time   = date('ymdhis');
	if( getDuplicateSlug($slug,$table,$field,$key=NULL,$value=NULL) > 0 ){

        $slug .= '-'.$i;
		$i = $i+1;
		return UrlSlug( $slug ,$table,$field,$key=NULL,$value=NULL, $i);
    }else{
	   return $slug;
	}
  }
}
function getDuplicateSlug( $slug,$table,$field,$key=NULL,$value=NULL ){


    if($key != NULL && $value != NULL && is_numeric($value))
	{
	  $users  = DB::select("select count(id) as all_row from ".$table." where ".$field."='".$slug."' AND ".$key."= '".$value."'");
	  $users    = $users[0]->all_row;
	}
	else
	{
	  $users    = DB::select("select count(id) as all_row from ".$table." where ".$field."='".$slug."'");
	  $users    = $users[0]->all_row;
	}

	return $users;
}

if (!function_exists('homeRoute')) {

    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }
}

/*
 * Global helpers file with misc functions.
 */
if (!function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (!function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (!function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (!function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (!function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory.$filename)) {
                array_push($directory_list, $directory.$filename.'/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory.'*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (!function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (!function_exists('settings')) {
    /**
     * Access the settings helper.
     */
    function settings()
    {
        // Settings Details
        $settings = Setting::latest()->first();
        if (!empty($settings)) {
            return $settings;
        }
    }
}

if (!function_exists('createNotification')) {
    /**
     * create new notification.
     *
     * @param  $message    message you want to show in notification
     * @param  $userId     To Whom You Want To send Notification
     *
     * @return object
     */
    function createNotification($message, $userId)
    {
        $notification = new Notification();

        return $notification->insert([
            'message'    => $message,
            'user_id'    => $userId,
            'type'       => 1,
            'created_at' => Carbon::now(),
        ]);
    }
}

if (!function_exists('escapeSlashes')) {
    /**
     * Access the escapeSlashes helper.
     */
    function escapeSlashes($path)
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
        $path = str_replace('//', DIRECTORY_SEPARATOR, $path);
        $path = trim($path, DIRECTORY_SEPARATOR);

        return $path;
    }
}

if (!function_exists('getMenuItems')) {
    /**
     * Converts items (json string) to array and return array.
     */
    function getMenuItems($type = 'backend', $id = null)
    {
        $menu = new \App\Models\Menu\Menu();
        $menu = $menu->where('type', $type);
        if (!empty($id)) {
            $menu = $menu->where('id', $id);
        }
        $menu = $menu->first();
        if (!empty($menu) && !empty($menu->items)) {
            return json_decode($menu->items);
        }

        return [];
    }
}

if (!function_exists('getRouteUrl')) {
    /**
     * Converts querystring params to array and use it as route params and returns URL.
     */
    function getRouteUrl($url, $url_type = 'route', $separator = '?')
    {
        $routeUrl = '';
        if (!empty($url)) {
            if ($url_type == 'route') {
                if (strpos($url, $separator) !== false) {
                    $urlArray = explode($separator, $url);
                    $url = $urlArray[0];
                    parse_str($urlArray[1], $params);
                    $routeUrl = route($url, $params);
                } else {
                    $routeUrl = route($url);
                }
            } else {
                $routeUrl = $url;
            }
        }

        return $routeUrl;
    }
}

if (!function_exists('renderMenuItems')) {
    /**
     * render sidebar menu items after permission check.
     */
    function renderMenuItems($items, $viewName = 'backend.includes.partials.sidebar-item')
    {
        foreach ($items as $item) {
            // if(!empty($item->url) && !Route::has($item->url)) {
            //     return;
            // }
            if (!empty($item->view_permission_id)) {
                if (access()->allow($item->view_permission_id)) {
                    echo view($viewName, compact('item'));
                }
            } else {
                echo view($viewName, compact('item'));
            }
        }
    }
}

if (!function_exists('isActiveMenuItem')) {
    /**
     * checks if current URL is of current menu/sub-menu.
     */
    function isActiveMenuItem($item, $separator = '?')
    {
        $item->clean_url = $item->url;
        if (strpos($item->url, $separator) !== false) {
            $item->clean_url = explode($separator, $item->url, -1);
        }
        if (Active::checkRoutePattern($item->clean_url)) {
            return true;
        }
        if (!empty($item->children)) {
            foreach ($item->children as $child) {
                $child->clean_url = $child->url;
                if (strpos($child->url, $separator) !== false) {
                    $child->clean_url = explode($separator, $child->url, -1);
                }
                if (Active::checkRoutePattern($child->clean_url)) {
                    return true;
                }
            }
        }

        return false;
    }
}

if (!function_exists('checkDatabaseConnection')) {

    /**
     * @return bool
     */
    function checkDatabaseConnection()
    {
        try {
            DB::connection()->reconnect();

            return true;
        } catch (Exception $ex) {
            return false;
        }
    }
}
function get_times( $default = '', $interval = '+30 minutes' ) {
    $output = '';

    $current = strtotime( '00:00' );
    $end = strtotime( '23:59' );

    while( $current <= $end ) {
        $time = date( 'H:i', $current );
        $sel = ( $time == $default ) ? ' selected' : '';

        $output .= "<option value=\"{$time}\"{$sel}>" . date( 'h.i A', $current ) .'</option>';
        $current = strtotime( $interval, $current );
    }
    return $output;
}

function roundToNextHour($dateString) {
    $date = new DateTime($dateString);
    
    $minutes = $date->format('i');
    if ($minutes > 15) {
        $date->modify("+30 minutes");
        $date->modify('-'.$minutes.' minutes');
    }else{
        $date->modify("-".$minutes." minutes");
    }
    return $date;
}

function setProfileViewCount($userId){
    if(!$userId) return false;

    $userIpAddress = \Request::getClientIp();
    $insertArray = [
        "user_id" => $userId,
        "view_count" => 1,
        "ip_address" => $userIpAddress,
        "agent" => \Request::header('User-Agent')
    ];
    DB::insert("INSERT INTO `profile_views`(`user_id`, `view_count`, `ip_address`, `agent`) VALUES (?, ?,?,?) ON DUPLICATE KEY UPDATE view_count= view_count", array_values($insertArray));
}

function getProfileViewCount($userId){
    if(!$userId) return false;
    $profileCount = Profileviews::select(DB::raw('SUM(view_count) as counter'))->where('user_id', $userId)->first();
    return $profileCount->counter;
}
function getWorkingDays(){
   $workingDays = [
        '1' => 'Monday',
        '2' => 'Tuesday',
        '3' => 'Wednesday',
        '4' => 'Thursday',
        '5' => 'Friday',
        '6' => 'Saturday',
        '0' => 'Sunday'
    ];
    return $workingDays;
}

function _getTodaysAvailability($lawyerId){
    $currentDayNum = date('w');
    $availability = Availability::where('lawyer_id',$lawyerId)->where('avail_day', $currentDayNum)->whereRaw('(time_from <= "'.date('H:i').'" AND "'.date('H:i').'" <= time_to)')->first();
    // dd($currentDayNum, $lawyerId, $availability);
    if($availability){
        return $availability;
    }else{
        return false;
    }
}

function _getAvailabilityHtml($lawyerId){
    if(!$lawyerId){
        return '<span class="text-success text-bold">Not Available</span>';
    }
    $isAvailable = _getTodaysAvailability($lawyerId);
    if($isAvailable){
        return '<span class="text-success text-bold">Available</span>, '.date('l').' '.date('h:i A', strtotime($isAvailable->time_from)).'-'.date('h:i A', strtotime($isAvailable->time_to));
    }
    else{
        return '<span class="text-danger text-bold">Not Available</span>';
    }
}

function getPaymentLink($planId){
    $paymentObject = new Eazypay();
    return $paymentObject->getPaymentUrl('10.00');

}

function randID($length) {
    $vowels = 'AEUY';
    $consonants = '0123456789BCDFGHJKLMNPQRSTVWXZ';
    $idnumber = '';
    $alt = time() % 2;
    for ($i = 0;$i < $length;$i++) {
        if ($alt == 1) {
            $idnumber.= $consonants[(rand() % strlen($consonants)) ];
            $alt = 0;
        } else {
            $idnumber.= $vowels[(rand() % strlen($vowels)) ];
            $alt = 1;
        }
    }
    
    return $idnumber;
}